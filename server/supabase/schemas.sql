create table public."CRM_logs" (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  campaign_id bigint null,
  content jsonb[] null,
  influencer_id uuid null,
  constraint CRM_logs_pkey primary key (id),
  constraint CRM_logs_campaign_id_fkey foreign KEY (campaign_id) references campaign (id)
) TABLESPACE pg_default;


create table public.brands (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  brand_name text null,
  brand_description text null,
  location text null,
  brand_id uuid not null,
  constraint brands_pkey primary key (id),
  constraint brands_brand_id_key unique (brand_id)
) TABLESPACE pg_default;

create table public.campaign (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  brand_id uuid null,
  campaign_name text null,
  description text null,
  platforms text null,
  preferred_languages text null,
  budget numeric null,
  start_date date null,
  end_date date null,
  status text null default 'draft'::text,
  report_id uuid null,
  voice_enabled boolean null default false,
  brand_name text null,
  updated_at timestamp with time zone null default now(),
  final_price numeric null,
  contract_id uuid null,
  constraint campaign_pkey primary key (id),
  constraint campaign_contract_id_fkey foreign KEY (contract_id) references contracts (id)
) TABLESPACE pg_default;

create trigger update_campaign_updated_at_trigger BEFORE
update on campaign for EACH row
execute FUNCTION update_campaign_updated_at ();

create table public.contracts (
  id uuid not null default extensions.uuid_generate_v4 (),
  template_id text not null,
  influencer_id uuid not null,
  brand_id uuid not null,
  status text not null,
  contract_data jsonb not null,
  signed_by uuid null,
  signed_at timestamp with time zone null,
  signature_url text null,
  contract_url text null,
  payment_status text null,
  payment_id text null,
  razorpay_order_id text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint contracts_pkey primary key (id),
  constraint contracts_brand_id_fkey foreign KEY (brand_id) references auth.users (id),
  constraint contracts_influencer_id_fkey foreign KEY (influencer_id) references auth.users (id),
  constraint contracts_signed_by_fkey foreign KEY (signed_by) references auth.users (id),
  constraint contracts_payment_status_check check (
    (
      payment_status = any (
        array[
          'PENDING'::text,
          'INITIATED'::text,
          'COMPLETED'::text,
          'FAILED'::text
        ]
      )
    )
  ),
  constraint contracts_status_check check (
    (
      status = any (
        array[
          'DRAFT'::text,
          'PENDING_SIGNATURE'::text,
          'SIGNED'::text,
          'REJECTED'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_contracts_brand_id on public.contracts using btree (brand_id) TABLESPACE pg_default;

create index IF not exists idx_contracts_influencer_id on public.contracts using btree (influencer_id) TABLESPACE pg_default;

create index IF not exists idx_contracts_status on public.contracts using btree (status) TABLESPACE pg_default;

create index IF not exists idx_contracts_payment_status on public.contracts using btree (payment_status) TABLESPACE pg_default;

create trigger trigger_update_updated_at BEFORE
update on contracts for EACH row
execute FUNCTION update_updated_at_column ();

create table public.contracts (
  id uuid not null default extensions.uuid_generate_v4 (),
  template_id text not null,
  influencer_id uuid not null,
  brand_id uuid not null,
  status text not null,
  contract_data jsonb not null,
  signed_by uuid null,
  signed_at timestamp with time zone null,
  signature_url text null,
  contract_url text null,
  payment_status text null,
  payment_id text null,
  razorpay_order_id text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint contracts_pkey primary key (id),
  constraint contracts_brand_id_fkey foreign KEY (brand_id) references auth.users (id),
  constraint contracts_influencer_id_fkey foreign KEY (influencer_id) references auth.users (id),
  constraint contracts_signed_by_fkey foreign KEY (signed_by) references auth.users (id),
  constraint contracts_payment_status_check check (
    (
      payment_status = any (
        array[
          'PENDING'::text,
          'INITIATED'::text,
          'COMPLETED'::text,
          'FAILED'::text
        ]
      )
    )
  ),
  constraint contracts_status_check check (
    (
      status = any (
        array[
          'DRAFT'::text,
          'PENDING_SIGNATURE'::text,
          'SIGNED'::text,
          'REJECTED'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_contracts_brand_id on public.contracts using btree (brand_id) TABLESPACE pg_default;

create index IF not exists idx_contracts_influencer_id on public.contracts using btree (influencer_id) TABLESPACE pg_default;

create index IF not exists idx_contracts_status on public.contracts using btree (status) TABLESPACE pg_default;

create index IF not exists idx_contracts_payment_status on public.contracts using btree (payment_status) TABLESPACE pg_default;

create trigger trigger_update_updated_at BEFORE
update on contracts for EACH row
execute FUNCTION update_updated_at_column ();

create table public.contracts (
  id uuid not null default extensions.uuid_generate_v4 (),
  template_id text not null,
  influencer_id uuid not null,
  brand_id uuid not null,
  status text not null,
  contract_data jsonb not null,
  signed_by uuid null,
  signed_at timestamp with time zone null,
  signature_url text null,
  contract_url text null,
  payment_status text null,
  payment_id text null,
  razorpay_order_id text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint contracts_pkey primary key (id),
  constraint contracts_brand_id_fkey foreign KEY (brand_id) references auth.users (id),
  constraint contracts_influencer_id_fkey foreign KEY (influencer_id) references auth.users (id),
  constraint contracts_signed_by_fkey foreign KEY (signed_by) references auth.users (id),
  constraint contracts_payment_status_check check (
    (
      payment_status = any (
        array[
          'PENDING'::text,
          'INITIATED'::text,
          'COMPLETED'::text,
          'FAILED'::text
        ]
      )
    )
  ),
  constraint contracts_status_check check (
    (
      status = any (
        array[
          'DRAFT'::text,
          'PENDING_SIGNATURE'::text,
          'SIGNED'::text,
          'REJECTED'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_contracts_brand_id on public.contracts using btree (brand_id) TABLESPACE pg_default;

create index IF not exists idx_contracts_influencer_id on public.contracts using btree (influencer_id) TABLESPACE pg_default;

create index IF not exists idx_contracts_status on public.contracts using btree (status) TABLESPACE pg_default;

create index IF not exists idx_contracts_payment_status on public.contracts using btree (payment_status) TABLESPACE pg_default;

create trigger trigger_update_updated_at BEFORE
update on contracts for EACH row
execute FUNCTION update_updated_at_column ();