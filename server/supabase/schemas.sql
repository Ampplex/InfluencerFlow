-- Updated schemas for InfluencerFlow database
-- Based on current Supabase schema

-- CRM_logs table
CREATE TABLE public."CRM_logs" (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  campaign_id bigint,
  content jsonb[],
  influencer_id uuid,
  CONSTRAINT CRM_logs_pkey PRIMARY KEY (id),
  CONSTRAINT CRM_logs_campaign_id_fkey FOREIGN KEY (campaign_id) REFERENCES campaign (id)
) TABLESPACE pg_default;

-- Brands table
CREATE TABLE public.brands (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  brand_name text,
  brand_description text,
  location text,
  brand_id uuid NOT NULL,
  CONSTRAINT brands_pkey PRIMARY KEY (id),
  CONSTRAINT brands_brand_id_key UNIQUE (brand_id)
  -- NOTE: brand_id references auth.users(id) but the constraint is not explicit
) TABLESPACE pg_default;

-- Campaign table
CREATE TABLE public.campaign (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  brand_id uuid,
  campaign_name text,
  description text,
  platforms text,
  preferred_languages text,
  budget numeric,
  start_date date,
  end_date date,
  status text DEFAULT 'draft'::text,
  report_id uuid,
  voice_enabled boolean DEFAULT false,
  brand_name text,
  updated_at timestamp with time zone DEFAULT now(),
  final_price numeric,
  contract_id uuid,
  CONSTRAINT campaign_pkey PRIMARY KEY (id),
  CONSTRAINT campaign_contract_id_fkey FOREIGN KEY (contract_id) REFERENCES contracts (id)
  -- NOTE: brand_id should reference auth.users(id) but constraint is missing
) TABLESPACE pg_default;

-- Create trigger for campaign updated_at
CREATE OR REPLACE FUNCTION update_campaign_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_campaign_updated_at_trigger
BEFORE UPDATE ON campaign
FOR EACH ROW
EXECUTE FUNCTION update_campaign_updated_at();

-- Contracts table
CREATE TABLE public.contracts (
  id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
  template_id text NOT NULL,
  influencer_id uuid NOT NULL,
  brand_id uuid NOT NULL,
  status text NOT NULL,
  contract_data jsonb NOT NULL,
  signed_by uuid,
  signed_at timestamp with time zone,
  signature_url text,
  contract_url text,
  payment_status text,
  payment_id text,
  razorpay_order_id text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT contracts_pkey PRIMARY KEY (id),
  CONSTRAINT contracts_brand_id_fkey FOREIGN KEY (brand_id) REFERENCES auth.users (id),
  CONSTRAINT contracts_signed_by_fkey FOREIGN KEY (signed_by) REFERENCES auth.users (id),
  -- NOTE: Missing constraint - influencer_id should reference influencers(id)
  -- CONSTRAINT contracts_influencer_id_fkey FOREIGN KEY (influencer_id) REFERENCES public.influencers (id),
  CONSTRAINT contracts_payment_status_check CHECK (
    payment_status = ANY (ARRAY[
      'PENDING'::text,
      'INITIATED'::text,
      'COMPLETED'::text,
      'FAILED'::text
    ])
  ),
  CONSTRAINT contracts_status_check CHECK (
    status = ANY (ARRAY[
      'DRAFT'::text,
      'PENDING_SIGNATURE'::text,
      'SIGNED'::text,
      'REJECTED'::text
    ])
  )
) TABLESPACE pg_default;

COMMENT ON TABLE public.contracts IS 'Foreign key constraint on influencer_id temporarily dropped';

CREATE INDEX idx_contracts_brand_id ON public.contracts USING btree (brand_id) TABLESPACE pg_default;
CREATE INDEX idx_contracts_influencer_id ON public.contracts USING btree (influencer_id) TABLESPACE pg_default;
CREATE INDEX idx_contracts_status ON public.contracts USING btree (status) TABLESPACE pg_default;
CREATE INDEX idx_contracts_payment_status ON public.contracts USING btree (payment_status) TABLESPACE pg_default;

-- Create trigger for updated_at column in contracts
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_updated_at
BEFORE UPDATE ON contracts
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Influencers table
CREATE TABLE public.influencers (
  id uuid DEFAULT gen_random_uuid() NOT NULL,
  influencer_username text NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  influencer_email text NOT NULL,
  influencer_followers integer,
  platforms text,
  bio text,
  CONSTRAINT influencers_pkey PRIMARY KEY (id),
  CONSTRAINT influencers_influencer_email_key UNIQUE (influencer_email)
) TABLESPACE pg_default;

-- Outreach table
CREATE TABLE public.outreach (
  id uuid DEFAULT gen_random_uuid() NOT NULL,
  campaign_id integer,
  influencer_id uuid NOT NULL,
  influencer_username character varying NOT NULL,
  influencer_email character varying NOT NULL,
  influencer_followers integer DEFAULT 0,
  brand_id character varying NOT NULL, -- NOTE: This should be uuid type and reference auth.users
  email_subject text,
  email_body text,
  status character varying DEFAULT 'sent'::character varying,
  sent_at timestamp with time zone DEFAULT now(),
  replied_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  agreed_price numeric,
  contract_id uuid,
  CONSTRAINT outreach_pkey PRIMARY KEY (id),
  CONSTRAINT outreach_campaign_id_fkey FOREIGN KEY (campaign_id) REFERENCES campaign (id),
  CONSTRAINT outreach_contract_id_fkey FOREIGN KEY (contract_id) REFERENCES contracts (id)
  -- NOTE: Missing constraint - influencer_id should reference influencers(id)
  -- CONSTRAINT outreach_influencer_id_fkey FOREIGN KEY (influencer_id) REFERENCES public.influencers (id),
  -- NOTE: brand_id should be uuid type and reference auth.users(id)
) TABLESPACE pg_default;

COMMENT ON TABLE public.outreach IS 'Tracks all outreach activities to influencers';
COMMENT ON COLUMN public.outreach.influencer_followers IS 'Follower count at time of outreach';